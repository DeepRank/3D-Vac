import argparse
import pandas as pd
import glob
import pickle
import os
import subprocess
from mpi4py import MPI
import numpy as np
import re

conn = MPI.COMM_WORLD
size = conn.Get_size()
rank = conn.Get_rank()

arg_parser = argparse.ArgumentParser(
    description="""
    Copies target models from db2 into db2_selected_models folder to build db3 on top of them. The default behavior is to select 
    the top1 model generated by PANDORA (ranked in the molpdf.tsv file for each db2 case).
    """
)
arg_parser.add_argument("--structure-rank", "-r",
    help="""
    How many pdb structure to pick from each case. This argument corresponds to the n-th rank. For instance if -r 4,
    the number of structures selected from each case will be the 4 first structures in the molpdf.tsv file. For now,
    This whole pipeline is working only for 1 structure per db2 case. Therefore this argument shouldn't be tweaked, for now.
    Default 1.""",
    default=1,
    type=int,
)
arg_parser.add_argument("--csv-file", "-f",
    help="""
    Name of db1 in data/external/processed/. Default BA_pMHCI.csv.
    """,
    default="../../data/external/processed/BA_pMHCI.csv",
)
arg_parser.add_argument("--mhc-class", "-m",
    help="""
    MHC class
    """,
    default="I",
    choices=["I", "II"],
)
a = arg_parser.parse_args()

db2_selected_models_path = f"/projects/0/einf2380/data/pMHC{a.mhc_class}/db2_selected_models"

csv_path = f"{a.csv_file}"
df = pd.read_csv(csv_path)

# MANAGE MPI
# ----------

if rank==0:
    # Look only at db2 cases and not every cases:
    all_models = glob.glob(f"/projects/0/einf2380/data/pMHC{a.mhc_class}/3D_models//BA/*/*")
    db2 = np.array([folder for folder in all_models if "_".join(folder.split("/")[-1].split("_")[0:2]) in df["ID"].tolist()])
    db2 = np.array_split(db2, size)
else:
    db2 = None
db2 = conn.scatter(db2, root=0)

# EXECUTE TASK
# ------------

# For each db2 cases, get the best structures:
db2_targets = []
for case in db2:
        molpdf_path = f"{case}/molpdf_DOPE.tsv"
        molpdf_df = pd.read_csv(molpdf_path, sep="\t", header=None)
        target_scores = molpdf_df.iloc[:,1].sort_values()[0:a.structure_rank]
        target_mask = [score in target_scores.tolist() for score in molpdf_df.iloc[:,1]]
        target_ids = molpdf_df[target_mask].iloc[:,0]
        targets = [f"{case}/{structure}" for structure in target_ids]
        db2_targets.extend(targets)

# Symlink each target:
for structure in db2_targets:
    # attempt to create subfolders:
        dir = "/".join(structure.split("/")[-4:-1])
        pdb_file = structure.split("/")[-1].replace("_", "-")
        destination_dir = f"{db2_selected_models_path}/{dir}/pdb"
        destination_file = f"{destination_dir}/{pdb_file}"
        try: # create remaining subfolders:
            os.makedirs(destination_dir); 
        except:
            print('Something went worng in creating', destination_dir)
        try: #make the symlink:
            subprocess.check_call(f'cp {structure} {destination_file}', shell=True)
        except:
            pass

# retrieve all db2 to make sure everything is modelled:
print(f"Finished copying on {rank} for {db2.shape[0]} cases.")
db2 = conn.gather(db2.shape[0], root=0)
if rank == 0:
    db2 = np.array(db2)
    print(f"Total structures copied: {db2.sum()}")